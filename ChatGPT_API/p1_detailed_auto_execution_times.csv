function_index,prompt,sample_index,code_segment,Size,Min,Average,Max,Exception
0_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",1,['def funcImp(arr):\n    n = len(arr) + 1\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(arr)\n    return expected_sum - actual_sum'],1000,0.0002733999990596203,0.00029901800000516234,0.0005854000010003801,N/A
0_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",1,['def funcImp(arr):\n    n = len(arr) + 1\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(arr)\n    return expected_sum - actual_sum'],10000,0.0026521999989199685,0.002919529000027978,0.0032684999987395713,N/A
0_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",1,['def funcImp(arr):\n    n = len(arr) + 1\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(arr)\n    return expected_sum - actual_sum'],100000,0.11117079999894486,0.1300733170001149,0.14388099999996484,N/A
0_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",2,['def funcImp(nums):\n    n = len(nums)\n    sum_nums = sum(nums)\n    sum_all = (n + 1) * (n + 2) // 2\n    return sum_all - sum_nums'],1000,0.0002741999996942468,0.00029940999995233143,0.0004934999997203704,N/A
0_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",2,['def funcImp(nums):\n    n = len(nums)\n    sum_nums = sum(nums)\n    sum_all = (n + 1) * (n + 2) // 2\n    return sum_all - sum_nums'],10000,0.0027038999996875646,0.002886209999942366,0.003514500000164844,N/A
0_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",2,['def funcImp(nums):\n    n = len(nums)\n    sum_nums = sum(nums)\n    sum_all = (n + 1) * (n + 2) // 2\n    return sum_all - sum_nums'],100000,0.11296550000042771,0.13291133700005958,0.1618543000004138,N/A
0_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",3,['def funcImp(arr):\n    n = len(arr) + 1\n    expected_sum = n * (n + 1) / 2\n    actual_sum = sum(arr)\n    return int(expected_sum - actual_sum)'],1000,0.0002880000010918593,0.0003161440001167648,0.0005736000002798392,N/A
0_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",3,['def funcImp(arr):\n    n = len(arr) + 1\n    expected_sum = n * (n + 1) / 2\n    actual_sum = sum(arr)\n    return int(expected_sum - actual_sum)'],10000,0.0026276000007783296,0.002819777000022441,0.0033703000008245,N/A
0_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",3,['def funcImp(arr):\n    n = len(arr) + 1\n    expected_sum = n * (n + 1) / 2\n    actual_sum = sum(arr)\n    return int(expected_sum - actual_sum)'],100000,0.10991540000031819,0.1309607710000091,0.14060760000029404,N/A
0_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",4,['def funcImp(arr):\n    n = len(arr)\n    total_sum = (n + 1) * (n + 2) // 2\n    sum_arr = sum(arr)\n    return total_sum - sum_arr'],1000,0.0002738999992288882,0.00029869900003177464,0.0006472999994002748,N/A
0_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",4,['def funcImp(arr):\n    n = len(arr)\n    total_sum = (n + 1) * (n + 2) // 2\n    sum_arr = sum(arr)\n    return total_sum - sum_arr'],10000,0.0026852999999391614,0.0029940329999590177,0.006248199999390636,N/A
0_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",4,['def funcImp(arr):\n    n = len(arr)\n    total_sum = (n + 1) * (n + 2) // 2\n    sum_arr = sum(arr)\n    return total_sum - sum_arr'],100000,0.11196290000043518,0.1331939959999363,0.17111089999889373,N/A
0_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",5,['def funcImp(nums):\n    n = len(nums)\n    expected_sum = (n + 1) * (n + 2) // 2\n    actual_sum = sum(nums)\n    missing_num = expected_sum - actual_sum\n    return missing_num'],1000,0.0002842999983840855,0.0003009559999918565,0.0004910000006930204,N/A
0_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",5,['def funcImp(nums):\n    n = len(nums)\n    expected_sum = (n + 1) * (n + 2) // 2\n    actual_sum = sum(nums)\n    missing_num = expected_sum - actual_sum\n    return missing_num'],10000,0.0026918999992631143,0.002893880999963585,0.004096500000741798,N/A
0_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",5,['def funcImp(nums):\n    n = len(nums)\n    expected_sum = (n + 1) * (n + 2) // 2\n    actual_sum = sum(nums)\n    missing_num = expected_sum - actual_sum\n    return missing_num'],100000,0.11613519999991695,0.13302081599989835,0.1569515000010142,N/A
0_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",6,['def funcImp(nums):\n    n = len(nums) + 1\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(nums)\n    return expected_sum - actual_sum'],1000,0.00028960000054212287,0.00030065099994317277,0.0004181000003882218,N/A
0_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",6,['def funcImp(nums):\n    n = len(nums) + 1\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(nums)\n    return expected_sum - actual_sum'],10000,0.0027893000005860813,0.0029631820000031437,0.004178299999693991,N/A
0_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",6,['def funcImp(nums):\n    n = len(nums) + 1\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(nums)\n    return expected_sum - actual_sum'],100000,0.11146050000024843,0.13210564199995134,0.14660680000088178,N/A
0_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",7,['def funcImp(nums):\n    n = len(nums)\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(nums)\n    missing_num = expected_sum - actual_sum\n    return missing_num'],1000,0.00028420000126061495,0.0002974759999779053,0.0004031999997096136,N/A
0_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",7,['def funcImp(nums):\n    n = len(nums)\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(nums)\n    missing_num = expected_sum - actual_sum\n    return missing_num'],10000,0.0027466999999887776,0.002947400999983074,0.0037055000011605443,N/A
0_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",7,['def funcImp(nums):\n    n = len(nums)\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(nums)\n    missing_num = expected_sum - actual_sum\n    return missing_num'],100000,0.11912740000116173,0.13615432600012356,0.14782520000153454,N/A
0_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",8,['def funcImp(arr):\n    actual_sum = (len(arr) + 1) * (len(arr) + 2) // 2\n    arr_sum = sum(arr)\n    missing_num = actual_sum - arr_sum\n    return missing_num'],1000,0.00028729999939969275,0.0002967399998306064,0.0003313999986858107,N/A
0_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",8,['def funcImp(arr):\n    actual_sum = (len(arr) + 1) * (len(arr) + 2) // 2\n    arr_sum = sum(arr)\n    missing_num = actual_sum - arr_sum\n    return missing_num'],10000,0.0027310000004945323,0.0029002099999706843,0.0036872999990009703,N/A
0_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",8,['def funcImp(arr):\n    actual_sum = (len(arr) + 1) * (len(arr) + 2) // 2\n    arr_sum = sum(arr)\n    missing_num = actual_sum - arr_sum\n    return missing_num'],100000,0.1195813000013004,0.13533184100004292,0.15671330000077432,N/A
0_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",9,"['def funcImp(arr):\n    n = len(arr)\n    xor_arr = arr[0]\n    xor_num = 1\n    for i in range(1, n):\n        xor_arr ^= arr[i]\n    for i in range(2, n + 2):\n        xor_num ^= i\n    return xor_arr ^ xor_num']",1000,0.005168399999092799,0.005584458999946946,0.008626799999547075,N/A
0_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",9,"['def funcImp(arr):\n    n = len(arr)\n    xor_arr = arr[0]\n    xor_num = 1\n    for i in range(1, n):\n        xor_arr ^= arr[i]\n    for i in range(2, n + 2):\n        xor_num ^= i\n    return xor_arr ^ xor_num']",10000,0.05293880000135687,0.05674031499998819,0.06709159999991243,N/A
0_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",9,"['def funcImp(arr):\n    n = len(arr)\n    xor_arr = arr[0]\n    xor_num = 1\n    for i in range(1, n):\n        xor_arr ^= arr[i]\n    for i in range(2, n + 2):\n        xor_num ^= i\n    return xor_arr ^ xor_num']",100000,0.6199741999989783,0.6493148600000314,0.7183249999998225,N/A
0_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",10,['def funcImp(nums):\n    n = len(nums)\n    expected_sum = (n + 1) * (n + 2) // 2\n    actual_sum = sum(nums)\n    missing_num = expected_sum - actual_sum\n    return missing_num'],1000,0.00027439999939815607,0.0002939680000417866,0.0003969999997934792,N/A
0_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",10,['def funcImp(nums):\n    n = len(nums)\n    expected_sum = (n + 1) * (n + 2) // 2\n    actual_sum = sum(nums)\n    missing_num = expected_sum - actual_sum\n    return missing_num'],10000,0.002651200000400422,0.002871341000100074,0.003642200001195306,N/A
0_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",10,['def funcImp(nums):\n    n = len(nums)\n    expected_sum = (n + 1) * (n + 2) // 2\n    actual_sum = sum(nums)\n    missing_num = expected_sum - actual_sum\n    return missing_num'],100000,0.11751470000126574,0.1333941679999225,0.14323069999954896,N/A
1_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",1,['def funcImp(nums):\n    n = len(nums)\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(nums)\n    missing_num = expected_sum - actual_sum\n    return missing_num'],1000,0.000278499999694759,0.0002945020000697696,0.0003424000005907146,N/A
1_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",1,['def funcImp(nums):\n    n = len(nums)\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(nums)\n    missing_num = expected_sum - actual_sum\n    return missing_num'],10000,0.0026497999988350784,0.002880323999943357,0.004133200000069337,N/A
1_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",1,['def funcImp(nums):\n    n = len(nums)\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(nums)\n    missing_num = expected_sum - actual_sum\n    return missing_num'],100000,0.11473079999996116,0.1332579069998792,0.14263599999867438,N/A
1_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",2,['def funcImp(lst):\n    xor_sum = 0\n    for i in range(len(lst) + 1):\n        xor_sum ^= i\n    for num in lst:\n        xor_sum ^= num\n    return xor_sum'],1000,0.004377999999633175,0.004689868000041315,0.006493300001238822,N/A
1_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",2,['def funcImp(lst):\n    xor_sum = 0\n    for i in range(len(lst) + 1):\n        xor_sum ^= i\n    for num in lst:\n        xor_sum ^= num\n    return xor_sum'],10000,0.04324040000028617,0.047491227999998956,0.05130490000010468,N/A
1_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",2,['def funcImp(lst):\n    xor_sum = 0\n    for i in range(len(lst) + 1):\n        xor_sum ^= i\n    for num in lst:\n        xor_sum ^= num\n    return xor_sum'],100000,0.519582700000683,0.5377327630000582,0.5686196999995445,N/A
1_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",3,['def funcImp(arr):\n    n = len(arr)\n    expected_sum = (n + 1) * (n + 2) / 2\n    actual_sum = sum(arr)\n    missing_number = expected_sum - actual_sum\n    return missing_number'],1000,0.0002750999992713332,0.00029223100007584433,0.000514600000315113,N/A
1_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",3,['def funcImp(arr):\n    n = len(arr)\n    expected_sum = (n + 1) * (n + 2) / 2\n    actual_sum = sum(arr)\n    missing_number = expected_sum - actual_sum\n    return missing_number'],10000,0.0026134999989153584,0.002819793999915419,0.004983700000593672,N/A
1_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",3,['def funcImp(arr):\n    n = len(arr)\n    expected_sum = (n + 1) * (n + 2) / 2\n    actual_sum = sum(arr)\n    missing_number = expected_sum - actual_sum\n    return missing_number'],100000,0.11432179999974323,0.13324857199997495,0.1450543999999354,N/A
1_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",4,"['def funcImp(arr):\n    n = len(arr) + 1\n    xor_sum1 = 1\n    for i in range(2, n + 1):\n        xor_sum1 = xor_sum1 ^ i\n    xor_sum2 = arr[0]\n    for i in range(1, len(arr)):\n        xor_sum2 = xor_sum2 ^ arr[i]\n    missing_num = xor_sum1 ^ xor_sum2\n    return missing_num']",1000,0.0050967999995918944,0.005751036000037857,0.006584599999769125,N/A
1_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",4,"['def funcImp(arr):\n    n = len(arr) + 1\n    xor_sum1 = 1\n    for i in range(2, n + 1):\n        xor_sum1 = xor_sum1 ^ i\n    xor_sum2 = arr[0]\n    for i in range(1, len(arr)):\n        xor_sum2 = xor_sum2 ^ arr[i]\n    missing_num = xor_sum1 ^ xor_sum2\n    return missing_num']",10000,0.055371299999023904,0.05819651999998314,0.06547359999967739,N/A
1_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",4,"['def funcImp(arr):\n    n = len(arr) + 1\n    xor_sum1 = 1\n    for i in range(2, n + 1):\n        xor_sum1 = xor_sum1 ^ i\n    xor_sum2 = arr[0]\n    for i in range(1, len(arr)):\n        xor_sum2 = xor_sum2 ^ arr[i]\n    missing_num = xor_sum1 ^ xor_sum2\n    return missing_num']",100000,0.6388829999996233,0.6562529800000266,0.7152481000011903,N/A
1_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",5,['def funcImp(nums):\n    n = len(nums) + 1\n    total_sum = n * (n + 1) // 2\n    curr_sum = sum(nums)\n    missing_num = total_sum - curr_sum\n    return missing_num'],1000,0.0002736999995249789,0.00029071799996017945,0.0004824999996344559,N/A
1_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",5,['def funcImp(nums):\n    n = len(nums) + 1\n    total_sum = n * (n + 1) // 2\n    curr_sum = sum(nums)\n    missing_num = total_sum - curr_sum\n    return missing_num'],10000,0.0026637000009941403,0.0028403830000388553,0.0033416999995097285,N/A
1_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",5,['def funcImp(nums):\n    n = len(nums) + 1\n    total_sum = n * (n + 1) // 2\n    curr_sum = sum(nums)\n    missing_num = total_sum - curr_sum\n    return missing_num'],100000,0.11761750000005122,0.13215312699985587,0.14435719999892171,N/A
1_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",6,['def funcImp(arr):\n    n = len(arr) + 1\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(arr)\n    return expected_sum - actual_sum'],1000,0.000274800000624964,0.00029715800015765124,0.0007664000004297122,N/A
1_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",6,['def funcImp(arr):\n    n = len(arr) + 1\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(arr)\n    return expected_sum - actual_sum'],10000,0.002647199999046279,0.0028352859998631175,0.004178900000624708,N/A
1_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",6,['def funcImp(arr):\n    n = len(arr) + 1\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(arr)\n    return expected_sum - actual_sum'],100000,0.11476440000114962,0.13196641699987594,0.14261980000082985,N/A
1_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",7,"['def funcImp(nums):\n    missing_num = len(nums)\n    for (i, num) in enumerate(nums):\n        missing_num ^= i ^ num\n    return missing_num']",1000,0.004844399998546578,0.005172117000129219,0.005632700000205659,N/A
1_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",7,"['def funcImp(nums):\n    missing_num = len(nums)\n    for (i, num) in enumerate(nums):\n        missing_num ^= i ^ num\n    return missing_num']",10000,0.047860599999694386,0.050083850999799326,0.05558969999947294,N/A
1_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",7,"['def funcImp(nums):\n    missing_num = len(nums)\n    for (i, num) in enumerate(nums):\n        missing_num ^= i ^ num\n    return missing_num']",100000,0.5521019000007072,0.5716741379999075,0.6260733999988588,N/A
1_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",8,['def funcImp(numbers):\n    n = len(numbers)\n    expected_sum = (n + 1) * (n + 2) // 2\n    actual_sum = sum(numbers)\n    return expected_sum - actual_sum'],1000,0.0002751000010903226,0.0002939839999635296,0.00038049999966460746,N/A
1_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",8,['def funcImp(numbers):\n    n = len(numbers)\n    expected_sum = (n + 1) * (n + 2) // 2\n    actual_sum = sum(numbers)\n    return expected_sum - actual_sum'],10000,0.002634300000863732,0.0028508220000730946,0.004412000000229455,N/A
1_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",8,['def funcImp(numbers):\n    n = len(numbers)\n    expected_sum = (n + 1) * (n + 2) // 2\n    actual_sum = sum(numbers)\n    return expected_sum - actual_sum'],100000,0.11703290000150446,0.13203006199997616,0.14012870000078692,N/A
1_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",9,['def funcImp(lst):\n    n = len(lst) + 1\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(lst)\n    return expected_sum - actual_sum'],1000,0.000279799998679664,0.0002977239999563608,0.0006281000005401438,N/A
1_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",9,['def funcImp(lst):\n    n = len(lst) + 1\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(lst)\n    return expected_sum - actual_sum'],10000,0.0026509999988775235,0.002832644000045548,0.0030980000010458753,N/A
1_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",9,['def funcImp(lst):\n    n = len(lst) + 1\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(lst)\n    return expected_sum - actual_sum'],100000,0.11329660000046715,0.13128849599990644,0.14143999999942025,N/A
1_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",10,['def funcImp(arr):\n    n = len(arr)\n    total_sum = sum(arr)\n    expected_sum = n * (n + 1) // 2\n    missing_num = expected_sum - total_sum\n    return missing_num'],1000,0.00028220000058354344,0.0002948950000063633,0.00033179999991261866,N/A
1_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",10,['def funcImp(arr):\n    n = len(arr)\n    total_sum = sum(arr)\n    expected_sum = n * (n + 1) // 2\n    missing_num = expected_sum - total_sum\n    return missing_num'],10000,0.0026276999997207895,0.0028831529999479243,0.0033679999996820698,N/A
1_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",10,['def funcImp(arr):\n    n = len(arr)\n    total_sum = sum(arr)\n    expected_sum = n * (n + 1) // 2\n    missing_num = expected_sum - total_sum\n    return missing_num'],100000,0.11611480000101437,0.13175218399994265,0.1427912999988621,N/A
2_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",1,['def funcImp(nums):\n    n = len(nums)\n    total_sum = sum(nums)\n    expected_sum = (n + 1) * (n + 2) // 2\n    return expected_sum - total_sum'],1000,0.0002758999999059597,0.00029377100017882187,0.00033970000004046597,N/A
2_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",1,['def funcImp(nums):\n    n = len(nums)\n    total_sum = sum(nums)\n    expected_sum = (n + 1) * (n + 2) // 2\n    return expected_sum - total_sum'],10000,0.0027128999990964076,0.0028383159999611964,0.0030452999999397434,N/A
2_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",1,['def funcImp(nums):\n    n = len(nums)\n    total_sum = sum(nums)\n    expected_sum = (n + 1) * (n + 2) // 2\n    return expected_sum - total_sum'],100000,0.11678500000016356,0.131623260000124,0.1421541999989131,N/A
2_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",2,['def funcImp(arr):\n    n = len(arr)\n    expected_sum = (n + 1) * (n + 2) / 2\n    actual_sum = sum(arr)\n    missing_num = expected_sum - actual_sum\n    return missing_num'],1000,0.00027460000092105474,0.00029850200000510087,0.0005853000002389308,N/A
2_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",2,['def funcImp(arr):\n    n = len(arr)\n    expected_sum = (n + 1) * (n + 2) / 2\n    actual_sum = sum(arr)\n    missing_num = expected_sum - actual_sum\n    return missing_num'],10000,0.0026257999998051673,0.002785896999976103,0.003071000001000357,N/A
2_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",2,['def funcImp(arr):\n    n = len(arr)\n    expected_sum = (n + 1) * (n + 2) / 2\n    actual_sum = sum(arr)\n    missing_num = expected_sum - actual_sum\n    return missing_num'],100000,0.11405560000093828,0.12965990200020314,0.138364399999773,N/A
2_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",3,['def funcImp(arr):\n    n = len(arr)\n    total = (n + 1) * (n + 2) / 2\n    arr_sum = sum(arr)\n    return int(total - arr_sum)'],1000,0.00028530000054161064,0.0002983260000110022,0.0004833000002690824,N/A
2_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",3,['def funcImp(arr):\n    n = len(arr)\n    total = (n + 1) * (n + 2) / 2\n    arr_sum = sum(arr)\n    return int(total - arr_sum)'],10000,0.00262519999887445,0.002798962999968353,0.0042767000013554934,N/A
2_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",3,['def funcImp(arr):\n    n = len(arr)\n    total = (n + 1) * (n + 2) / 2\n    arr_sum = sum(arr)\n    return int(total - arr_sum)'],100000,0.11794689999987895,0.12992359899988515,0.13752949999980046,N/A
2_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",4,['def funcImp(nums):\n    n = len(nums)\n    expected_sum = (n + 1) * (n + 2) // 2\n    actual_sum = sum(nums)\n    return expected_sum - actual_sum'],1000,0.0002775000011752127,0.0002952589999040356,0.0005820999995194143,N/A
2_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",4,['def funcImp(nums):\n    n = len(nums)\n    expected_sum = (n + 1) * (n + 2) // 2\n    actual_sum = sum(nums)\n    return expected_sum - actual_sum'],10000,0.002655300000697025,0.002832188000102178,0.003681799998958013,N/A
2_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",4,['def funcImp(nums):\n    n = len(nums)\n    expected_sum = (n + 1) * (n + 2) // 2\n    actual_sum = sum(nums)\n    return expected_sum - actual_sum'],100000,0.11839560000044003,0.1301864440000827,0.1385098000009748,N/A
2_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",5,['def funcImp(nums):\n    n = len(nums)\n    expected_sum = (n + 1) * (n + 2) // 2\n    actual_sum = sum(nums)\n    missing_num = expected_sum - actual_sum\n    return missing_num'],1000,0.00027410000075178687,0.00028836500010584134,0.0005605999995168531,N/A
2_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",5,['def funcImp(nums):\n    n = len(nums)\n    expected_sum = (n + 1) * (n + 2) // 2\n    actual_sum = sum(nums)\n    missing_num = expected_sum - actual_sum\n    return missing_num'],10000,0.0026414999992994126,0.0028286480001042946,0.003598999999667285,N/A
2_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",5,['def funcImp(nums):\n    n = len(nums)\n    expected_sum = (n + 1) * (n + 2) // 2\n    actual_sum = sum(nums)\n    missing_num = expected_sum - actual_sum\n    return missing_num'],100000,0.11625260000073467,0.13029691400004595,0.1362515999990137,N/A
2_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",6,['def funcImp(nums):\n    n = len(nums) + 1\n    total_sum = n * (n + 1) // 2\n    array_sum = sum(nums)\n    return total_sum - array_sum'],1000,0.0002839999997377163,0.0002944550000574964,0.0003950000009353971,N/A
2_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",6,['def funcImp(nums):\n    n = len(nums) + 1\n    total_sum = n * (n + 1) // 2\n    array_sum = sum(nums)\n    return total_sum - array_sum'],10000,0.0026901000001089415,0.002873509999953967,0.003272399999332265,N/A
2_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",6,['def funcImp(nums):\n    n = len(nums) + 1\n    total_sum = n * (n + 1) // 2\n    array_sum = sum(nums)\n    return total_sum - array_sum'],100000,0.11203500000010536,0.13127867899993362,0.1395234999999957,N/A
2_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",7,['def funcImp(arr):\n    n = len(arr)\n    expected_sum = (n + 1) * (n + 2) // 2\n    actual_sum = sum(arr)\n    return expected_sum - actual_sum'],1000,0.000283800000033807,0.00029831999994712533,0.0005142999998497544,N/A
2_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",7,['def funcImp(arr):\n    n = len(arr)\n    expected_sum = (n + 1) * (n + 2) // 2\n    actual_sum = sum(arr)\n    return expected_sum - actual_sum'],10000,0.0027050999997300096,0.002875646000084089,0.003395200001250487,N/A
2_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",7,['def funcImp(arr):\n    n = len(arr)\n    expected_sum = (n + 1) * (n + 2) // 2\n    actual_sum = sum(arr)\n    return expected_sum - actual_sum'],100000,0.11419059999934689,0.1317616210000051,0.1402209000007133,N/A
2_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",8,['def funcImp(nums):\n    n = len(nums)\n    expected_sum = (n + 1) * (n + 2) // 2\n    actual_sum = sum(nums)\n    missing_num = expected_sum - actual_sum\n    return missing_num'],1000,0.0002745000001596054,0.00029382899994743637,0.0005368000001908513,N/A
2_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",8,['def funcImp(nums):\n    n = len(nums)\n    expected_sum = (n + 1) * (n + 2) // 2\n    actual_sum = sum(nums)\n    missing_num = expected_sum - actual_sum\n    return missing_num'],10000,0.002656099999512662,0.002842588999938016,0.0033353999988321448,N/A
2_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",8,['def funcImp(nums):\n    n = len(nums)\n    expected_sum = (n + 1) * (n + 2) // 2\n    actual_sum = sum(nums)\n    missing_num = expected_sum - actual_sum\n    return missing_num'],100000,0.11513969999941764,0.13052162300002237,0.138541799999075,N/A
2_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",9,['def funcImp(arr):\n    n = len(arr)\n    expected_sum = (n + 1) * (n + 2) // 2\n    actual_sum = sum(arr)\n    missing_num = expected_sum - actual_sum\n    return missing_num'],1000,0.00028509999901871197,0.00029448300005242346,0.0003297000002930872,N/A
2_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",9,['def funcImp(arr):\n    n = len(arr)\n    expected_sum = (n + 1) * (n + 2) // 2\n    actual_sum = sum(arr)\n    missing_num = expected_sum - actual_sum\n    return missing_num'],10000,0.0027283999988867436,0.002868260000104783,0.00326390000009269,N/A
2_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",9,['def funcImp(arr):\n    n = len(arr)\n    expected_sum = (n + 1) * (n + 2) // 2\n    actual_sum = sum(arr)\n    missing_num = expected_sum - actual_sum\n    return missing_num'],100000,0.11832750000030501,0.13035052299997915,0.1383148999993864,N/A
2_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",10,['def funcImp(arr):\n    n = len(arr)\n    expected_sum = (n + 1) * (n + 2) // 2\n    actual_sum = sum(arr)\n    return expected_sum - actual_sum'],1000,0.00027379999846743885,0.00028704299989840365,0.0003240999994886806,N/A
2_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",10,['def funcImp(arr):\n    n = len(arr)\n    expected_sum = (n + 1) * (n + 2) // 2\n    actual_sum = sum(arr)\n    return expected_sum - actual_sum'],10000,0.0026639000006980496,0.00282346600009987,0.0031696000005467795,N/A
2_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",10,['def funcImp(arr):\n    n = len(arr)\n    expected_sum = (n + 1) * (n + 2) // 2\n    actual_sum = sum(arr)\n    return expected_sum - actual_sum'],100000,0.11857349999991129,0.13110482600004617,0.14062749999902735,N/A
3_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",1,['def funcImp(arr):\n    n = len(arr)\n    total_sum = sum(arr)\n    expected_sum = n * (n + 1) / 2\n    missing_num = expected_sum - total_sum\n    return missing_num'],1000,0.0002718999985518167,0.0002939190000324743,0.0003757999984372873,N/A
3_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",1,['def funcImp(arr):\n    n = len(arr)\n    total_sum = sum(arr)\n    expected_sum = n * (n + 1) / 2\n    missing_num = expected_sum - total_sum\n    return missing_num'],10000,0.00262519999887445,0.002786335999971925,0.003996799998276401,N/A
3_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",1,['def funcImp(arr):\n    n = len(arr)\n    total_sum = sum(arr)\n    expected_sum = n * (n + 1) / 2\n    missing_num = expected_sum - total_sum\n    return missing_num'],100000,0.10871709999992163,0.13181163600018408,0.14036730000043462,N/A
3_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",2,['def funcImp(arr):\n    n = len(arr)\n    total_sum = n * (n + 1) // 2\n    arr_sum = sum(arr)\n    return total_sum - arr_sum'],1000,0.00027260000024398323,0.00028633599995373513,0.00035630000093078706,N/A
3_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",2,['def funcImp(arr):\n    n = len(arr)\n    total_sum = n * (n + 1) // 2\n    arr_sum = sum(arr)\n    return total_sum - arr_sum'],10000,0.0026463999984116526,0.0028501729998970404,0.003454499999861582,N/A
3_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",2,['def funcImp(arr):\n    n = len(arr)\n    total_sum = n * (n + 1) // 2\n    arr_sum = sum(arr)\n    return total_sum - arr_sum'],100000,0.11356549999982235,0.1319395379999696,0.14256849999947008,N/A
3_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",3,['def funcImp(lst):\n    n = len(lst) + 1\n    expected_sum = n * (lst[0] + lst[-1]) / 2\n    actual_sum = sum(lst)\n    return expected_sum - actual_sum'],1000,0.00027549999867915176,0.0002974940000058268,0.0005947999998170417,N/A
3_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",3,['def funcImp(lst):\n    n = len(lst) + 1\n    expected_sum = n * (lst[0] + lst[-1]) / 2\n    actual_sum = sum(lst)\n    return expected_sum - actual_sum'],10000,0.002638299998579896,0.0027835850000155916,0.0034054999996442348,N/A
3_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",3,['def funcImp(lst):\n    n = len(lst) + 1\n    expected_sum = n * (lst[0] + lst[-1]) / 2\n    actual_sum = sum(lst)\n    return expected_sum - actual_sum'],100000,0.11494569999922533,0.13287605899999108,0.14054770000075223,N/A
3_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",4,['def funcImp(nums):\n    n = len(nums) + 1\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(nums)\n    missing_num = expected_sum - actual_sum\n    return missing_num'],1000,0.00027320000117470045,0.00029425900005662696,0.0004600000011123484,N/A
3_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",4,['def funcImp(nums):\n    n = len(nums) + 1\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(nums)\n    missing_num = expected_sum - actual_sum\n    return missing_num'],10000,0.0026605999992170837,0.002852292000043235,0.003322900000057416,N/A
3_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",4,['def funcImp(nums):\n    n = len(nums) + 1\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(nums)\n    missing_num = expected_sum - actual_sum\n    return missing_num'],100000,0.11315660000036587,0.13237675899987153,0.14221139999972365,N/A
3_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",5,['def funcImp(nums):\n    n = len(nums)\n    total_sum = (n + 1) * (n + 2) / 2\n    actual_sum = sum(nums)\n    return int(total_sum - actual_sum)'],1000,0.00027829999999084976,0.0002999530000488448,0.0006099999991420191,N/A
3_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",5,['def funcImp(nums):\n    n = len(nums)\n    total_sum = (n + 1) * (n + 2) / 2\n    actual_sum = sum(nums)\n    return int(total_sum - actual_sum)'],10000,0.002625600000101258,0.0028041339999981575,0.004553299999315641,N/A
3_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",5,['def funcImp(nums):\n    n = len(nums)\n    total_sum = (n + 1) * (n + 2) / 2\n    actual_sum = sum(nums)\n    return int(total_sum - actual_sum)'],100000,0.11478639999950246,0.13277834600006827,0.1408984000008786,N/A
3_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",6,"['def funcImp(array):\n    n = len(array)\n    xor_num = array[0]\n    for i in range(1, n):\n        xor_num ^= array[i]\n    for i in range(1, n + 2):\n        xor_num ^= i\n    return xor_num']",1000,0.0049961999993684,0.005391034000258515,0.006161300001622294,N/A
3_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",6,"['def funcImp(array):\n    n = len(array)\n    xor_num = array[0]\n    for i in range(1, n):\n        xor_num ^= array[i]\n    for i in range(1, n + 2):\n        xor_num ^= i\n    return xor_num']",10000,0.0511292000010144,0.05405778499989537,0.06087590000061027,N/A
3_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",6,"['def funcImp(array):\n    n = len(array)\n    xor_num = array[0]\n    for i in range(1, n):\n        xor_num ^= array[i]\n    for i in range(1, n + 2):\n        xor_num ^= i\n    return xor_num']",100000,0.5968745999998646,0.6166506939999817,0.6921887999997125,N/A
3_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",7,['def funcImp(arr):\n    n = len(arr) + 1\n    total_sum = n * (n + 1) // 2\n    arr_sum = sum(arr)\n    missing_num = total_sum - arr_sum\n    return missing_num'],1000,0.0002738999992288882,0.0002981039999576751,0.0006493000000773463,N/A
3_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",7,['def funcImp(arr):\n    n = len(arr) + 1\n    total_sum = n * (n + 1) // 2\n    arr_sum = sum(arr)\n    missing_num = total_sum - arr_sum\n    return missing_num'],10000,0.002673000000868342,0.002827585999875737,0.003450700000030338,N/A
3_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",7,['def funcImp(arr):\n    n = len(arr) + 1\n    total_sum = n * (n + 1) // 2\n    arr_sum = sum(arr)\n    missing_num = total_sum - arr_sum\n    return missing_num'],100000,0.11725970000043162,0.13191298000001553,0.14011509999909322,N/A
3_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",8,['def funcImp(arr):\n    n = len(arr)\n    total_sum = (n + 1) * (n + 2) // 2\n    current_sum = sum(arr)\n    return total_sum - current_sum'],1000,0.0002745000001596054,0.0002933349999875645,0.0004912000003969297,N/A
3_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",8,['def funcImp(arr):\n    n = len(arr)\n    total_sum = (n + 1) * (n + 2) // 2\n    current_sum = sum(arr)\n    return total_sum - current_sum'],10000,0.0026293000009900425,0.0028402390001065216,0.0035164000000804663,N/A
3_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",8,['def funcImp(arr):\n    n = len(arr)\n    total_sum = (n + 1) * (n + 2) // 2\n    current_sum = sum(arr)\n    return total_sum - current_sum'],100000,0.11662439999963681,0.13033472799990706,0.13814120000097319,N/A
3_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",9,['def funcImp(nums):\n    n = len(nums)\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(nums)\n    missing_num = expected_sum - actual_sum\n    return missing_num'],1000,0.00028300000121816993,0.0002999229999477393,0.000530100000105449,N/A
3_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",9,['def funcImp(nums):\n    n = len(nums)\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(nums)\n    missing_num = expected_sum - actual_sum\n    return missing_num'],10000,0.002636999999594991,0.0028568979999545265,0.004083899999386631,N/A
3_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",9,['def funcImp(nums):\n    n = len(nums)\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(nums)\n    missing_num = expected_sum - actual_sum\n    return missing_num'],100000,0.1167105000004085,0.1305821539999306,0.1388078999989375,N/A
3_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",10,['def funcImp(nums):\n    n = len(nums)\n    total_sum = (n + 1) * (n + 2) // 2\n    actual_sum = sum(nums)\n    return total_sum - actual_sum'],1000,0.00027490000138641335,0.0002938250000624976,0.00033679999978630804,N/A
3_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",10,['def funcImp(nums):\n    n = len(nums)\n    total_sum = (n + 1) * (n + 2) // 2\n    actual_sum = sum(nums)\n    return total_sum - actual_sum'],10000,0.0026396999983262504,0.0028360369999973047,0.004162499999438296,N/A
3_p1_auto_find_duplicates_list_strategy,"""Quickest way to find missing number in an array of numbers. The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers as a parameter.""",10,['def funcImp(nums):\n    n = len(nums)\n    total_sum = (n + 1) * (n + 2) // 2\n    actual_sum = sum(nums)\n    return total_sum - actual_sum'],100000,0.11177709999901708,0.1292976529999578,0.13665110000147251,N/A
