function_index,prompt,sample_index,code_segment,Size,Min,Average,Max,Exception
0_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",1,"['def funcImp(arr, target_sum):\n    pairs = {}\n    count = 0\n    for i in arr:\n        if i in pairs:\n            count += pairs[i]\n        complement = target_sum - i\n        if complement in pairs:\n            pairs[complement] += 1\n        else:\n            pairs[complement] = 1\n    return count']",1000,0.007545299999037525,0.008088146999907621,0.009049500000401167,N/A
0_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",1,"['def funcImp(arr, target_sum):\n    pairs = {}\n    count = 0\n    for i in arr:\n        if i in pairs:\n            count += pairs[i]\n        complement = target_sum - i\n        if complement in pairs:\n            pairs[complement] += 1\n        else:\n            pairs[complement] = 1\n    return count']",10000,0.08319390000178828,0.08634984599990275,0.0913418999989517,N/A
0_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",1,"['def funcImp(arr, target_sum):\n    pairs = {}\n    count = 0\n    for i in arr:\n        if i in pairs:\n            count += pairs[i]\n        complement = target_sum - i\n        if complement in pairs:\n            pairs[complement] += 1\n        else:\n            pairs[complement] = 1\n    return count']",100000,1.2676644000021042,1.3078523060002407,1.3981347999979334,N/A
0_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",2,"['def funcImp(arr, target_sum):\n    pair_count = 0\n    encountered = {}\n    for num in arr:\n        complement = target_sum - num\n        if complement in encountered:\n            pair_count += encountered[complement]\n        encountered[num] = encountered.get(num, 0) + 1\n    return pair_count']",1000,0.00893290000021807,0.009511894999923243,0.010154000003240071,N/A
0_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",2,"['def funcImp(arr, target_sum):\n    pair_count = 0\n    encountered = {}\n    for num in arr:\n        complement = target_sum - num\n        if complement in encountered:\n            pair_count += encountered[complement]\n        encountered[num] = encountered.get(num, 0) + 1\n    return pair_count']",10000,0.09651759999906062,0.09908069899989641,0.10404320000088774,N/A
0_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",2,"['def funcImp(arr, target_sum):\n    pair_count = 0\n    encountered = {}\n    for num in arr:\n        complement = target_sum - num\n        if complement in encountered:\n            pair_count += encountered[complement]\n        encountered[num] = encountered.get(num, 0) + 1\n    return pair_count']",100000,1.36782569999923,1.4048777480001444,1.472040399999969,N/A
0_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",3,"['def funcImp(arr, target_sum):\n    pairs = {}\n    count = 0\n    for num in arr:\n        complement = target_sum - num\n        if complement in pairs:\n            count += pairs[complement]\n        pairs[num] = pairs.get(num, 0) + 1\n    return count']",1000,0.009088599999813596,0.009523738000134473,0.00999220000085188,N/A
0_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",3,"['def funcImp(arr, target_sum):\n    pairs = {}\n    count = 0\n    for num in arr:\n        complement = target_sum - num\n        if complement in pairs:\n            count += pairs[complement]\n        pairs[num] = pairs.get(num, 0) + 1\n    return count']",10000,0.09598579999874346,0.09885374000008597,0.10387690000061411,N/A
0_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",3,"['def funcImp(arr, target_sum):\n    pairs = {}\n    count = 0\n    for num in arr:\n        complement = target_sum - num\n        if complement in pairs:\n            count += pairs[complement]\n        pairs[num] = pairs.get(num, 0) + 1\n    return count']",100000,1.3718695000025036,1.4052359139999318,1.452786300000298,N/A
0_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",4,"['def funcImp(arr, target_sum):\n    count = {}\n    pairs = 0\n    for num in arr:\n        if num in count:\n            pairs += count[num]\n        complement = target_sum - num\n        if complement in count:\n            count[complement] += 1\n        else:\n            count[complement] = 1\n    return pairs']",1000,0.007634199999301927,0.00804543999976886,0.008629399999335874,N/A
0_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",4,"['def funcImp(arr, target_sum):\n    count = {}\n    pairs = 0\n    for num in arr:\n        if num in count:\n            pairs += count[num]\n        complement = target_sum - num\n        if complement in count:\n            count[complement] += 1\n        else:\n            count[complement] = 1\n    return pairs']",10000,0.08327719999942929,0.08616550700004154,0.0924345000021276,N/A
0_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",4,"['def funcImp(arr, target_sum):\n    count = {}\n    pairs = 0\n    for num in arr:\n        if num in count:\n            pairs += count[num]\n        complement = target_sum - num\n        if complement in count:\n            count[complement] += 1\n        else:\n            count[complement] = 1\n    return pairs']",100000,1.2641126000016811,1.3026301570002032,1.3599401999999827,N/A
0_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",5,"['def funcImp(lst, target_sum):\n    count = 0\n    pairs = {}\n    for num in lst:\n        if num in pairs:\n            count += pairs[num]\n        complement = target_sum - num\n        if complement not in pairs:\n            pairs[complement] = 0\n        pairs[complement] += 1\n    return count']",1000,0.011241799998970237,0.011932413999784331,0.01255489999675774,N/A
0_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",5,"['def funcImp(lst, target_sum):\n    count = 0\n    pairs = {}\n    for num in lst:\n        if num in pairs:\n            count += pairs[num]\n        complement = target_sum - num\n        if complement not in pairs:\n            pairs[complement] = 0\n        pairs[complement] += 1\n    return count']",10000,0.11888420000104816,0.12381947200006835,0.1292198000010103,N/A
0_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",5,"['def funcImp(lst, target_sum):\n    count = 0\n    pairs = {}\n    for num in lst:\n        if num in pairs:\n            count += pairs[num]\n        complement = target_sum - num\n        if complement not in pairs:\n            pairs[complement] = 0\n        pairs[complement] += 1\n    return count']",100000,1.6777347999995982,1.726219051999942,1.7852860999992117,N/A
0_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",6,"['def funcImp(arr, target_sum):\n    count = 0\n    complements = set()\n    for i in arr:\n        if i in complements:\n            count += 1\n        complements.add(target_sum - i)\n    return count']",1000,0.005371799998101778,0.005664852999652794,0.006216199999471428,N/A
0_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",6,"['def funcImp(arr, target_sum):\n    count = 0\n    complements = set()\n    for i in arr:\n        if i in complements:\n            count += 1\n        complements.add(target_sum - i)\n    return count']",10000,0.06549040000027162,0.06871208599979582,0.07826260000001639,N/A
0_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",6,"['def funcImp(arr, target_sum):\n    count = 0\n    complements = set()\n    for i in arr:\n        if i in complements:\n            count += 1\n        complements.add(target_sum - i)\n    return count']",100000,1.0153978999987885,1.0528373160000046,1.0954286999985925,N/A
0_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",7,"['def funcImp(arr, target_sum):\n    count = 0\n    complements = set()\n    for num in arr:\n        if num in complements:\n            count += 1\n        complements.add(target_sum - num)\n    return count']",1000,0.005386000000726199,0.0056421010002304685,0.006121099999290891,N/A
0_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",7,"['def funcImp(arr, target_sum):\n    count = 0\n    complements = set()\n    for num in arr:\n        if num in complements:\n            count += 1\n        complements.add(target_sum - num)\n    return count']",10000,0.06538480000017444,0.0678344309998647,0.07183789999908186,N/A
0_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",7,"['def funcImp(arr, target_sum):\n    count = 0\n    complements = set()\n    for num in arr:\n        if num in complements:\n            count += 1\n        complements.add(target_sum - num)\n    return count']",100000,1.0179167999995116,1.0469075950001205,1.0920454999977665,N/A
0_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",8,"['def funcImp(arr, target_sum):\n    counts = {}\n    pairs = 0\n    for num in arr:\n        complement = target_sum - num\n        if complement in counts:\n            pairs += counts[complement]\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    return pairs']",1000,0.007656000001588836,0.00801626300020871,0.008752900001127273,N/A
0_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",8,"['def funcImp(arr, target_sum):\n    counts = {}\n    pairs = 0\n    for num in arr:\n        complement = target_sum - num\n        if complement in counts:\n            pairs += counts[complement]\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    return pairs']",10000,0.08188890000019455,0.08454026799980056,0.09251990000120713,N/A
0_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",8,"['def funcImp(arr, target_sum):\n    counts = {}\n    pairs = 0\n    for num in arr:\n        complement = target_sum - num\n        if complement in counts:\n            pairs += counts[complement]\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n    return pairs']",100000,1.2208396999994875,1.2580778830000054,1.3469808000008925,N/A
0_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",9,"['def funcImp(arr, target_sum):\n    pair_count = 0\n    value_count = {}\n    for num in arr:\n        complement = target_sum - num\n        if complement in value_count:\n            pair_count += value_count[complement]\n        if num in value_count:\n            value_count[num] += 1\n        else:\n            value_count[num] = 1\n    return pair_count']",1000,0.007570800000394229,0.007951792000130808,0.008566699998482363,N/A
0_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",9,"['def funcImp(arr, target_sum):\n    pair_count = 0\n    value_count = {}\n    for num in arr:\n        complement = target_sum - num\n        if complement in value_count:\n            pair_count += value_count[complement]\n        if num in value_count:\n            value_count[num] += 1\n        else:\n            value_count[num] = 1\n    return pair_count']",10000,0.08125699999800418,0.08411913699979777,0.08880470000076457,N/A
0_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",9,"['def funcImp(arr, target_sum):\n    pair_count = 0\n    value_count = {}\n    for num in arr:\n        complement = target_sum - num\n        if complement in value_count:\n            pair_count += value_count[complement]\n        if num in value_count:\n            value_count[num] += 1\n        else:\n            value_count[num] = 1\n    return pair_count']",100000,1.220663500000228,1.2617494740002804,1.3266265999991447,N/A
0_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",10,"['def funcImp(nums, target_sum):\n    count = 0\n    complements = set()\n    for num in nums:\n        complement = target_sum - num\n        if complement in complements:\n            count += 1\n        complements.add(num)\n    return count']",1000,0.005596999999397667,0.005932317999831866,0.0065170999987458345,N/A
0_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",10,"['def funcImp(nums, target_sum):\n    count = 0\n    complements = set()\n    for num in nums:\n        complement = target_sum - num\n        if complement in complements:\n            count += 1\n        complements.add(num)\n    return count']",10000,0.06367369999861694,0.06727774200007844,0.07189149999976507,N/A
0_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",10,"['def funcImp(nums, target_sum):\n    count = 0\n    complements = set()\n    for num in nums:\n        complement = target_sum - num\n        if complement in complements:\n            count += 1\n        complements.add(num)\n    return count']",100000,0.9508208000006562,0.9819448799998282,1.0416650000006484,N/A
1_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",1,"['def funcImp(arr, target_sum):\n    complements = {}\n    count = 0\n    for num in arr:\n        if num in complements:\n            count += complements[num]\n        complement = target_sum - num\n        complements[complement] = complements.get(complement, 0) + 1\n    return count']",1000,0.009317899999587098,0.009699587000177416,0.01056330000210437,N/A
1_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",1,"['def funcImp(arr, target_sum):\n    complements = {}\n    count = 0\n    for num in arr:\n        if num in complements:\n            count += complements[num]\n        complement = target_sum - num\n        complements[complement] = complements.get(complement, 0) + 1\n    return count']",10000,0.09852110000065295,0.10078877999974793,0.10607420000087586,N/A
1_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",1,"['def funcImp(arr, target_sum):\n    complements = {}\n    count = 0\n    for num in arr:\n        if num in complements:\n            count += complements[num]\n        complement = target_sum - num\n        complements[complement] = complements.get(complement, 0) + 1\n    return count']",100000,1.4316904000006616,1.467267536000363,1.5182444999991276,N/A
1_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",2,"['def funcImp(arr, target_sum):\n    count_pairs = {}\n    count = 0\n    for num in arr:\n        complement = target_sum - num\n        if complement in count_pairs:\n            count += count_pairs[complement]\n        if num in count_pairs:\n            count_pairs[num] += 1\n        else:\n            count_pairs[num] = 1\n    return count']",1000,0.00767450000057579,0.00799612499984505,0.008732300000701798,N/A
1_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",2,"['def funcImp(arr, target_sum):\n    count_pairs = {}\n    count = 0\n    for num in arr:\n        complement = target_sum - num\n        if complement in count_pairs:\n            count += count_pairs[complement]\n        if num in count_pairs:\n            count_pairs[num] += 1\n        else:\n            count_pairs[num] = 1\n    return count']",10000,0.08159349999914411,0.08452966599979846,0.08976389999952517,N/A
1_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",2,"['def funcImp(arr, target_sum):\n    count_pairs = {}\n    count = 0\n    for num in arr:\n        complement = target_sum - num\n        if complement in count_pairs:\n            count += count_pairs[complement]\n        if num in count_pairs:\n            count_pairs[num] += 1\n        else:\n            count_pairs[num] = 1\n    return count']",100000,1.2171572999977798,1.2596527729996887,1.3120280999974057,N/A
1_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",3,"['def funcImp(arr, target_sum):\n    count = 0\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    for num in arr:\n        complement = target_sum - num\n        if complement in count_dict:\n            count += count_dict[complement]\n        count_dict[num] -= 1\n    return count']",1000,0.012008300000161398,0.012553225999981805,0.013606900000013411,N/A
1_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",3,"['def funcImp(arr, target_sum):\n    count = 0\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    for num in arr:\n        complement = target_sum - num\n        if complement in count_dict:\n            count += count_dict[complement]\n        count_dict[num] -= 1\n    return count']",10000,0.130661199997121,0.13479569999981322,0.13987980000092648,N/A
1_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",3,"['def funcImp(arr, target_sum):\n    count = 0\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    for num in arr:\n        complement = target_sum - num\n        if complement in count_dict:\n            count += count_dict[complement]\n        count_dict[num] -= 1\n    return count']",100000,1.7389597000001231,1.7885121600000276,1.83999810000023,N/A
1_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",4,"[""def funcImp(arr, target_sum):\n    pairs = set()\n    for elem in arr:\n        complement = target_sum - elem\n        if complement in pairs:\n            print(f'Pair found: {complement} + {elem} = {target_sum}')\n        pairs.add(elem)""]",1000,0.005658900001435541,0.0060801000000719795,0.008077000002231216,N/A
1_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",4,"[""def funcImp(arr, target_sum):\n    pairs = set()\n    for elem in arr:\n        complement = target_sum - elem\n        if complement in pairs:\n            print(f'Pair found: {complement} + {elem} = {target_sum}')\n        pairs.add(elem)""]",10000,0.06571310000072117,0.07264098399991781,0.08054939999783528,N/A
1_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",4,"[""def funcImp(arr, target_sum):\n    pairs = set()\n    for elem in arr:\n        complement = target_sum - elem\n        if complement in pairs:\n            print(f'Pair found: {complement} + {elem} = {target_sum}')\n        pairs.add(elem)""]",100000,1.0118752000016684,1.4009289939998053,1.6261444999981904,N/A
1_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",5,"['def funcImp(arr, target_sum):\n    count_dict = {}\n    pairs = []\n    for num in arr:\n        complement = target_sum - num\n        if complement in count_dict:\n            for i in range(count_dict[complement]):\n                pairs.append((complement, num))\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    return pairs']",1000,0.007495800000469899,0.008099703999760096,0.01285730000017793,N/A
1_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",5,"['def funcImp(arr, target_sum):\n    count_dict = {}\n    pairs = []\n    for num in arr:\n        complement = target_sum - num\n        if complement in count_dict:\n            for i in range(count_dict[complement]):\n                pairs.append((complement, num))\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    return pairs']",10000,0.08203990000038175,0.08526071299977048,0.09001739999803249,N/A
1_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",5,"['def funcImp(arr, target_sum):\n    count_dict = {}\n    pairs = []\n    for num in arr:\n        complement = target_sum - num\n        if complement in count_dict:\n            for i in range(count_dict[complement]):\n                pairs.append((complement, num))\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    return pairs']",100000,1.2277031000012357,1.2958965919999172,1.3528393000015058,N/A
1_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",6,"['def funcImp(arr, target_sum):\n    occurrence_count = {}\n    pair_count = 0\n    for num in arr:\n        complement = target_sum - num\n        if complement in occurrence_count:\n            pair_count += occurrence_count[complement]\n        if num in occurrence_count:\n            occurrence_count[num] += 1\n        else:\n            occurrence_count[num] = 1\n    return pair_count']",1000,0.007507399997848552,0.008013285999804793,0.008615300001110882,N/A
1_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",6,"['def funcImp(arr, target_sum):\n    occurrence_count = {}\n    pair_count = 0\n    for num in arr:\n        complement = target_sum - num\n        if complement in occurrence_count:\n            pair_count += occurrence_count[complement]\n        if num in occurrence_count:\n            occurrence_count[num] += 1\n        else:\n            occurrence_count[num] = 1\n    return pair_count']",10000,0.08216339999853517,0.08541815299995506,0.09026929999890854,N/A
1_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",6,"['def funcImp(arr, target_sum):\n    occurrence_count = {}\n    pair_count = 0\n    for num in arr:\n        complement = target_sum - num\n        if complement in occurrence_count:\n            pair_count += occurrence_count[complement]\n        if num in occurrence_count:\n            occurrence_count[num] += 1\n        else:\n            occurrence_count[num] = 1\n    return pair_count']",100000,1.2160886000019673,1.2579824109999391,1.3120505999977468,N/A
1_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",7,"['def funcImp(lst, target_sum):\n    freq = {}\n    count = 0\n    for num in lst:\n        diff = target_sum - num\n        if diff in freq:\n            count += freq[diff]\n            freq[num] = freq.get(num, 0) + 1\n        else:\n            freq[num] = freq.get(num, 0) + 1\n    return count']",1000,0.009164600000076462,0.009544547000186867,0.010066200000437675,N/A
1_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",7,"['def funcImp(lst, target_sum):\n    freq = {}\n    count = 0\n    for num in lst:\n        diff = target_sum - num\n        if diff in freq:\n            count += freq[diff]\n            freq[num] = freq.get(num, 0) + 1\n        else:\n            freq[num] = freq.get(num, 0) + 1\n    return count']",10000,0.0966889999981504,0.09929267200008325,0.10398549999808893,N/A
1_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",7,"['def funcImp(lst, target_sum):\n    freq = {}\n    count = 0\n    for num in lst:\n        diff = target_sum - num\n        if diff in freq:\n            count += freq[diff]\n            freq[num] = freq.get(num, 0) + 1\n        else:\n            freq[num] = freq.get(num, 0) + 1\n    return count']",100000,1.362166700000671,1.4067268310000873,1.469841499998438,N/A
1_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",8,"['def funcImp(nums, target_sum):\n    seen = {}\n    pairs = 0\n    for num in nums:\n        complement = target_sum - num\n        if complement in seen:\n            pairs += seen[complement]\n        seen[num] = seen.get(num, 0) + 1\n    return pairs']",1000,0.00912850000167964,0.009558004000246001,0.010269500002323184,N/A
1_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",8,"['def funcImp(nums, target_sum):\n    seen = {}\n    pairs = 0\n    for num in nums:\n        complement = target_sum - num\n        if complement in seen:\n            pairs += seen[complement]\n        seen[num] = seen.get(num, 0) + 1\n    return pairs']",10000,0.09615750000011758,0.10005195799978538,0.11727189999874099,N/A
1_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",8,"['def funcImp(nums, target_sum):\n    seen = {}\n    pairs = 0\n    for num in nums:\n        complement = target_sum - num\n        if complement in seen:\n            pairs += seen[complement]\n        seen[num] = seen.get(num, 0) + 1\n    return pairs']",100000,1.3691088999985368,1.415457634999948,1.4710577000005287,N/A
1_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",9,"['def funcImp(arr, target_sum):\n    seen = {}\n    pairs = []\n    for num in arr:\n        complement = target_sum - num\n        if complement in seen:\n            pairs.append((complement, num))\n        seen[num] = True\n    return pairs']",1000,0.006396099997800775,0.006670501999797125,0.007304500002646819,N/A
1_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",9,"['def funcImp(arr, target_sum):\n    seen = {}\n    pairs = []\n    for num in arr:\n        complement = target_sum - num\n        if complement in seen:\n            pairs.append((complement, num))\n        seen[num] = True\n    return pairs']",10000,0.06928619999962393,0.07147189400009665,0.07615989999976591,N/A
1_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",9,"['def funcImp(arr, target_sum):\n    seen = {}\n    pairs = []\n    for num in arr:\n        complement = target_sum - num\n        if complement in seen:\n            pairs.append((complement, num))\n        seen[num] = True\n    return pairs']",100000,1.072195799999463,1.112232321000156,1.1639855000030366,N/A
1_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",10,"['def funcImp(arr, target_sum):\n    count = 0\n    complements = set()\n    for num in arr:\n        complement = target_sum - num\n        if complement in complements:\n            count += 1\n        complements.add(num)\n    return count']",1000,0.005528900001081638,0.005813296999949671,0.006550099999003578,N/A
1_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",10,"['def funcImp(arr, target_sum):\n    count = 0\n    complements = set()\n    for num in arr:\n        complement = target_sum - num\n        if complement in complements:\n            count += 1\n        complements.add(num)\n    return count']",10000,0.06393930000194814,0.06688797500028158,0.0717785000015283,N/A
1_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",10,"['def funcImp(arr, target_sum):\n    count = 0\n    complements = set()\n    for num in arr:\n        complement = target_sum - num\n        if complement in complements:\n            count += 1\n        complements.add(num)\n    return count']",100000,0.9382196000005933,0.9702942370001983,1.021579299998848,N/A
2_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",1,"['def funcImp(arr, target_sum):\n    count = 0\n    elements = {}\n    for num in arr:\n        if num in elements:\n            count += elements[num]\n        diff = target_sum - num\n        if diff in elements:\n            elements[diff] += 1\n        else:\n            elements[diff] = 1\n    return count']",1000,0.007730600002105348,0.008080450000270502,0.008664799999678507,N/A
2_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",1,"['def funcImp(arr, target_sum):\n    count = 0\n    elements = {}\n    for num in arr:\n        if num in elements:\n            count += elements[num]\n        diff = target_sum - num\n        if diff in elements:\n            elements[diff] += 1\n        else:\n            elements[diff] = 1\n    return count']",10000,0.08313099999941187,0.08591051600036735,0.09003049999955692,N/A
2_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",1,"['def funcImp(arr, target_sum):\n    count = 0\n    elements = {}\n    for num in arr:\n        if num in elements:\n            count += elements[num]\n        diff = target_sum - num\n        if diff in elements:\n            elements[diff] += 1\n        else:\n            elements[diff] = 1\n    return count']",100000,1.2599862999995821,1.3052322720001392,1.3501591999993252,N/A
2_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",2,"['def funcImp(arr, target_sum):\n    count = 0\n    complements = {}\n    for num in arr:\n        if num in complements:\n            count += complements[num]\n        complement = target_sum - num\n        complements[complement] = complements.get(complement, 0) + 1\n    return count']",1000,0.009141700000327546,0.009627415999893855,0.010563600000750739,N/A
2_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",2,"['def funcImp(arr, target_sum):\n    count = 0\n    complements = {}\n    for num in arr:\n        if num in complements:\n            count += complements[num]\n        complement = target_sum - num\n        complements[complement] = complements.get(complement, 0) + 1\n    return count']",10000,0.09701729999869713,0.10007105199998477,0.10465539999859175,N/A
2_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",2,"['def funcImp(arr, target_sum):\n    count = 0\n    complements = {}\n    for num in arr:\n        if num in complements:\n            count += complements[num]\n        complement = target_sum - num\n        complements[complement] = complements.get(complement, 0) + 1\n    return count']",100000,1.4136951000000408,1.4550725900004182,1.518921599999885,N/A
2_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",3,"['def funcImp(arr, target_sum):\n    seen = set()\n    result = 0\n    for num in arr:\n        complement = target_sum - num\n        if complement in seen:\n            result += 1\n        seen.add(num)\n    return result']",1000,0.00553320000108215,0.005796503999808919,0.006579999997484265,N/A
2_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",3,"['def funcImp(arr, target_sum):\n    seen = set()\n    result = 0\n    for num in arr:\n        complement = target_sum - num\n        if complement in seen:\n            result += 1\n        seen.add(num)\n    return result']",10000,0.06326220000119065,0.06638868899994123,0.07143009999708738,N/A
2_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",3,"['def funcImp(arr, target_sum):\n    seen = set()\n    result = 0\n    for num in arr:\n        complement = target_sum - num\n        if complement in seen:\n            result += 1\n        seen.add(num)\n    return result']",100000,0.9423955999991449,0.9689391229998727,1.0137814000008802,N/A
2_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",4,"['def funcImp(arr, target_sum):\n    count = 0\n    remnants = {}\n    for num in arr:\n        if num in remnants:\n            count += remnants[num]\n        rem = target_sum - num\n        if rem in remnants:\n            remnants[rem] += 1\n        else:\n            remnants[rem] = 1\n    return count']",1000,0.007555799998954171,0.007998134000154096,0.008664600001793588,N/A
2_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",4,"['def funcImp(arr, target_sum):\n    count = 0\n    remnants = {}\n    for num in arr:\n        if num in remnants:\n            count += remnants[num]\n        rem = target_sum - num\n        if rem in remnants:\n            remnants[rem] += 1\n        else:\n            remnants[rem] = 1\n    return count']",10000,0.0831517000005988,0.08582486300005257,0.09087730000101146,N/A
2_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",4,"['def funcImp(arr, target_sum):\n    count = 0\n    remnants = {}\n    for num in arr:\n        if num in remnants:\n            count += remnants[num]\n        rem = target_sum - num\n        if rem in remnants:\n            remnants[rem] += 1\n        else:\n            remnants[rem] = 1\n    return count']",100000,1.2645057999980054,1.3053161439999166,1.3634391000014148,N/A
2_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",5,"['def funcImp(arr, target_sum):\n    complements = {}\n    pairs = 0\n    for elem in arr:\n        if elem in complements:\n            pairs += complements[elem]\n        comp = target_sum - elem\n        if comp in complements:\n            complements[comp] += 1\n        else:\n            complements[comp] = 1\n    return pairs']",1000,0.0075393999977677595,0.008023069000155375,0.008734099999855971,N/A
2_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",5,"['def funcImp(arr, target_sum):\n    complements = {}\n    pairs = 0\n    for elem in arr:\n        if elem in complements:\n            pairs += complements[elem]\n        comp = target_sum - elem\n        if comp in complements:\n            complements[comp] += 1\n        else:\n            complements[comp] = 1\n    return pairs']",10000,0.08366549999846029,0.08673446000000695,0.09140449999904376,N/A
2_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",5,"['def funcImp(arr, target_sum):\n    complements = {}\n    pairs = 0\n    for elem in arr:\n        if elem in complements:\n            pairs += complements[elem]\n        comp = target_sum - elem\n        if comp in complements:\n            complements[comp] += 1\n        else:\n            complements[comp] = 1\n    return pairs']",100000,1.2667417000011483,1.3073840949999793,1.3646551999991061,N/A
2_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",6,"['def funcImp(arr, target_sum):\n    count = 0\n    complements = {}\n    for x in arr:\n        if x in complements:\n            count += complements[x]\n        complement = target_sum - x\n        if complement in complements:\n            complements[complement] += 1\n        else:\n            complements[complement] = 1\n    return count']",1000,0.007473300000128802,0.008026573999632091,0.008847599998262012,N/A
2_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",6,"['def funcImp(arr, target_sum):\n    count = 0\n    complements = {}\n    for x in arr:\n        if x in complements:\n            count += complements[x]\n        complement = target_sum - x\n        if complement in complements:\n            complements[complement] += 1\n        else:\n            complements[complement] = 1\n    return count']",10000,0.08265820000087842,0.08606214400009776,0.09166389999882085,N/A
2_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",6,"['def funcImp(arr, target_sum):\n    count = 0\n    complements = {}\n    for x in arr:\n        if x in complements:\n            count += complements[x]\n        complement = target_sum - x\n        if complement in complements:\n            complements[complement] += 1\n        else:\n            complements[complement] = 1\n    return count']",100000,1.2722721000027377,1.3060691980000048,1.3468189999985043,N/A
2_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",7,"['def funcImp(arr, target_sum):\n    count = 0\n    complements = set()\n    for i in arr:\n        if target_sum - i in complements:\n            count += 1\n        complements.add(i)\n    return count']",1000,0.005110800000693416,0.005523777999987942,0.006081500003347173,N/A
2_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",7,"['def funcImp(arr, target_sum):\n    count = 0\n    complements = set()\n    for i in arr:\n        if target_sum - i in complements:\n            count += 1\n        complements.add(i)\n    return count']",10000,0.06101219999982277,0.0638435509996998,0.06865019999895594,N/A
2_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",7,"['def funcImp(arr, target_sum):\n    count = 0\n    complements = set()\n    for i in arr:\n        if target_sum - i in complements:\n            count += 1\n        complements.add(i)\n    return count']",100000,0.9211063000002468,0.9512647659999129,1.0229197000007844,N/A
2_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",8,"['def funcImp(arr, target_sum):\n    complements = set()\n    count = 0\n    for elem in arr:\n        if elem in complements:\n            count += 1\n        complements.add(target_sum - elem)\n    return count']",1000,0.005182600001717219,0.005637369999931252,0.007928800001536729,N/A
2_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",8,"['def funcImp(arr, target_sum):\n    complements = set()\n    count = 0\n    for elem in arr:\n        if elem in complements:\n            count += 1\n        complements.add(target_sum - elem)\n    return count']",10000,0.06422060000113561,0.06775152499991237,0.07209669999792823,N/A
2_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",8,"['def funcImp(arr, target_sum):\n    complements = set()\n    count = 0\n    for elem in arr:\n        if elem in complements:\n            count += 1\n        complements.add(target_sum - elem)\n    return count']",100000,1.0177480000020296,1.0475239490001331,1.0808527000008326,N/A
2_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",9,"['def funcImp(lst, target_sum):\n    pairs = set()\n    remaining = set(lst)\n    for num in lst:\n        remaining.remove(num)\n        if target_sum - num in remaining:\n            pairs.add(tuple(sorted([num, target_sum - num])))\n    return len(pairs)']",0,0,0,0,"function_index: 2 , code_start_index: 228, Error: 889790"
2_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",10,"['def funcImp(arr, target_sum):\n    count = 0\n    complement_count = {}\n    for num in arr:\n        complement = target_sum - num\n        if complement in complement_count:\n            count += complement_count[complement]\n        if num in complement_count:\n            complement_count[num] += 1\n        else:\n            complement_count[num] = 1\n    return count']",1000,0.007623299999977462,0.00800797199994122,0.00870769999892218,N/A
2_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",10,"['def funcImp(arr, target_sum):\n    count = 0\n    complement_count = {}\n    for num in arr:\n        complement = target_sum - num\n        if complement in complement_count:\n            count += complement_count[complement]\n        if num in complement_count:\n            complement_count[num] += 1\n        else:\n            complement_count[num] = 1\n    return count']",10000,0.08163030000287108,0.08567299499998626,0.09107790000052773,N/A
2_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",10,"['def funcImp(arr, target_sum):\n    count = 0\n    complement_count = {}\n    for num in arr:\n        complement = target_sum - num\n        if complement in complement_count:\n            count += complement_count[complement]\n        if num in complement_count:\n            complement_count[num] += 1\n        else:\n            complement_count[num] = 1\n    return count']",100000,1.2123873000018648,1.2579584859998068,1.302673500002129,N/A
3_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",1,"['def funcImp(nums, target_sum):\n    num_dict = {}\n    count = 0\n    for num in nums:\n        if num in num_dict:\n            count += num_dict[num]\n        complement = target_sum - num\n        if complement in num_dict:\n            num_dict[complement] += 1\n        else:\n            num_dict[complement] = 1\n    return count']",1000,0.007569999997940613,0.008020888000028209,0.00843209999948158,N/A
3_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",1,"['def funcImp(nums, target_sum):\n    num_dict = {}\n    count = 0\n    for num in nums:\n        if num in num_dict:\n            count += num_dict[num]\n        complement = target_sum - num\n        if complement in num_dict:\n            num_dict[complement] += 1\n        else:\n            num_dict[complement] = 1\n    return count']",10000,0.08370260000083363,0.08674361599976692,0.09071339999718475,N/A
3_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",1,"['def funcImp(nums, target_sum):\n    num_dict = {}\n    count = 0\n    for num in nums:\n        if num in num_dict:\n            count += num_dict[num]\n        complement = target_sum - num\n        if complement in num_dict:\n            num_dict[complement] += 1\n        else:\n            num_dict[complement] = 1\n    return count']",100000,1.2693713000007847,1.3081127229997946,1.3617403999996895,N/A
3_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",2,"['def funcImp(arr, target_sum):\n    count = 0\n    complement_set = set()\n    for num in arr:\n        complement = target_sum - num\n        if complement in complement_set:\n            count += 1\n        complement_set.add(num)\n    return count']",1000,0.005547400000068592,0.005845329000039783,0.006336800001008669,N/A
3_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",2,"['def funcImp(arr, target_sum):\n    count = 0\n    complement_set = set()\n    for num in arr:\n        complement = target_sum - num\n        if complement in complement_set:\n            count += 1\n        complement_set.add(num)\n    return count']",10000,0.06376160000218078,0.06677024399985385,0.07151180000073509,N/A
3_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",2,"['def funcImp(arr, target_sum):\n    count = 0\n    complement_set = set()\n    for num in arr:\n        complement = target_sum - num\n        if complement in complement_set:\n            count += 1\n        complement_set.add(num)\n    return count']",100000,0.9464009000002989,0.9764394839998931,1.0356214999992517,N/A
3_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",3,"['def funcImp(arr, target_sum):\n    count = 0\n    complements = {}\n    for num in arr:\n        complement = target_sum - num\n        if complement in complements:\n            count += complements[complement]\n        if num in complements:\n            complements[num] += 1\n        else:\n            complements[num] = 1\n    return count']",1000,0.007664200002182042,0.00801954599974124,0.00865210000119987,N/A
3_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",3,"['def funcImp(arr, target_sum):\n    count = 0\n    complements = {}\n    for num in arr:\n        complement = target_sum - num\n        if complement in complements:\n            count += complements[complement]\n        if num in complements:\n            complements[num] += 1\n        else:\n            complements[num] = 1\n    return count']",10000,0.082126999997854,0.08528106700003263,0.09134020000055898,N/A
3_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",3,"['def funcImp(arr, target_sum):\n    count = 0\n    complements = {}\n    for num in arr:\n        complement = target_sum - num\n        if complement in complements:\n            count += complements[complement]\n        if num in complements:\n            complements[num] += 1\n        else:\n            complements[num] = 1\n    return count']",100000,1.2242049999986193,1.257976806999868,1.3183371999984956,N/A
3_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",4,"['def funcImp(arr, target_sum):\n    count = 0\n    seen = set()\n    for element in arr:\n        complement = target_sum - element\n        if complement in seen:\n            count += 1\n        seen.add(element)\n    return count']",1000,0.00552820000302745,0.005825067999940075,0.0064224999987345655,N/A
3_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",4,"['def funcImp(arr, target_sum):\n    count = 0\n    seen = set()\n    for element in arr:\n        complement = target_sum - element\n        if complement in seen:\n            count += 1\n        seen.add(element)\n    return count']",10000,0.06351630000062869,0.06617316300013044,0.07044070000119973,N/A
3_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",4,"['def funcImp(arr, target_sum):\n    count = 0\n    seen = set()\n    for element in arr:\n        complement = target_sum - element\n        if complement in seen:\n            count += 1\n        seen.add(element)\n    return count']",100000,0.9381162000026961,0.9668302099999709,1.0094869999993534,N/A
3_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",5,"['def funcImp(arr, target_sum):\n    count = 0\n    seen = set()\n    for num in arr:\n        complement = target_sum - num\n        if complement in seen:\n            count += 1\n        seen.add(num)\n    return count']",1000,0.005574899998464389,0.00585379100019054,0.006462699999246979,N/A
3_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",5,"['def funcImp(arr, target_sum):\n    count = 0\n    seen = set()\n    for num in arr:\n        complement = target_sum - num\n        if complement in seen:\n            count += 1\n        seen.add(num)\n    return count']",10000,0.06404439999823808,0.06690172700014956,0.0723680000010063,N/A
3_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",5,"['def funcImp(arr, target_sum):\n    count = 0\n    seen = set()\n    for num in arr:\n        complement = target_sum - num\n        if complement in seen:\n            count += 1\n        seen.add(num)\n    return count']",100000,0.9488421999994898,0.9765936019998116,1.0313411999995878,N/A
3_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",6,"['def funcImp(arr, target_sum):\n    seen = {}\n    count = 0\n    for num in arr:\n        complement = target_sum - num\n        if complement in seen:\n            count += seen[complement]\n        seen[num] = seen.get(num, 0) + 1\n    return count']",1000,0.009122499999648426,0.009545069000159856,0.010087900001963135,N/A
3_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",6,"['def funcImp(arr, target_sum):\n    seen = {}\n    count = 0\n    for num in arr:\n        complement = target_sum - num\n        if complement in seen:\n            count += seen[complement]\n        seen[num] = seen.get(num, 0) + 1\n    return count']",10000,0.09629739999945741,0.10028040100020007,0.11095089999798802,N/A
3_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",6,"['def funcImp(arr, target_sum):\n    seen = {}\n    count = 0\n    for num in arr:\n        complement = target_sum - num\n        if complement in seen:\n            count += seen[complement]\n        seen[num] = seen.get(num, 0) + 1\n    return count']",100000,1.3697704000005615,1.40916018800006,1.4578074000019114,N/A
3_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",7,"['def funcImp(arr, target_sum):\n    pairs = set()\n    res = 0\n    for num in arr:\n        diff = target_sum - num\n        if diff in pairs:\n            res += 1\n        else:\n            pairs.add(num)\n    return res']",1000,0.005497300000570249,0.005832370999705745,0.00652780000018538,N/A
3_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",7,"['def funcImp(arr, target_sum):\n    pairs = set()\n    res = 0\n    for num in arr:\n        diff = target_sum - num\n        if diff in pairs:\n            res += 1\n        else:\n            pairs.add(num)\n    return res']",10000,0.06343220000053407,0.06639174999996612,0.0718196000016178,N/A
3_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",7,"['def funcImp(arr, target_sum):\n    pairs = set()\n    res = 0\n    for num in arr:\n        diff = target_sum - num\n        if diff in pairs:\n            res += 1\n        else:\n            pairs.add(num)\n    return res']",100000,0.9304671000027156,0.9586456570001246,1.0086708999988332,N/A
3_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",8,"['def funcImp(arr, target_sum):\n    pairs = {}\n    count = 0\n    for num in arr:\n        complement = target_sum - num\n        if complement in pairs:\n            count += pairs[complement]\n        if num in pairs:\n            pairs[num] += 1\n        else:\n            pairs[num] = 1\n    return count']",1000,0.007654599998204503,0.008071964999871853,0.009014499999466352,N/A
3_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",8,"['def funcImp(arr, target_sum):\n    pairs = {}\n    count = 0\n    for num in arr:\n        complement = target_sum - num\n        if complement in pairs:\n            count += pairs[complement]\n        if num in pairs:\n            pairs[num] += 1\n        else:\n            pairs[num] = 1\n    return count']",10000,0.0825728000017989,0.0852061629997479,0.09005880000040634,N/A
3_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",8,"['def funcImp(arr, target_sum):\n    pairs = {}\n    count = 0\n    for num in arr:\n        complement = target_sum - num\n        if complement in pairs:\n            count += pairs[complement]\n        if num in pairs:\n            pairs[num] += 1\n        else:\n            pairs[num] = 1\n    return count']",100000,1.2291183000015735,1.2655161769999177,1.3210070000022824,N/A
3_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",9,"['def funcImp(arr, target_sum):\n    count = {}\n    pairs = 0\n    for num in arr:\n        complement = target_sum - num\n        if complement in count:\n            pairs += count[complement]\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    return pairs']",1000,0.007691500002692919,0.008072929999907502,0.008963799999037292,N/A
3_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",9,"['def funcImp(arr, target_sum):\n    count = {}\n    pairs = 0\n    for num in arr:\n        complement = target_sum - num\n        if complement in count:\n            pairs += count[complement]\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    return pairs']",10000,0.08234830000219517,0.08543309500015311,0.09035600000061095,N/A
3_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",9,"['def funcImp(arr, target_sum):\n    count = {}\n    pairs = 0\n    for num in arr:\n        complement = target_sum - num\n        if complement in count:\n            pairs += count[complement]\n        if num in count:\n            count[num] += 1\n        else:\n            count[num] = 1\n    return pairs']",100000,1.2213869000006525,1.2574789029999374,1.3137126000001444,N/A
3_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",10,"['def funcImp(arr, target_sum):\n    pairs = {}\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] in pairs:\n            count += pairs[arr[i]]\n        if target_sum - arr[i] in pairs:\n            pairs[target_sum - arr[i]] += 1\n        else:\n            pairs[target_sum - arr[i]] = 1\n    return count']",1000,0.010752499998488929,0.011187720000161789,0.011931900000490714,N/A
3_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",10,"['def funcImp(arr, target_sum):\n    pairs = {}\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] in pairs:\n            count += pairs[arr[i]]\n        if target_sum - arr[i] in pairs:\n            pairs[target_sum - arr[i]] += 1\n        else:\n            pairs[target_sum - arr[i]] = 1\n    return count']",10000,0.11351209999702405,0.11753964199986512,0.12685469999996712,N/A
3_p4_auto_find_duplicates_list_strategy,"""Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters.""",10,"['def funcImp(arr, target_sum):\n    pairs = {}\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] in pairs:\n            count += pairs[arr[i]]\n        if target_sum - arr[i] in pairs:\n            pairs[target_sum - arr[i]] += 1\n        else:\n            pairs[target_sum - arr[i]] = 1\n    return count']",100000,1.6066857000005257,1.7006619839997075,2.1786049000002095,N/A
