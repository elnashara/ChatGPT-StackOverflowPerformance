[Settings]
prompt_1_1 = "Quickest way to find missing number in an array of numbers. The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers as a parameter."
prompt_1_2 = "Quickest way to find missing number in an array of numbers. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers as a parameter."
prompt_1_3 = "Quickest way to find missing number in an array of numbers. The implementation should be in a function named funcImp that takes a single list of integers as a parameter."
prompt_1_4 = "Quickest way to find missing number in an array of numbers. The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers as a parameter."

prompt_2_1 = "Find the Duplicate Number. The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers as a parameter."
prompt_2_2 = "Find the Duplicate Number. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers as a parameter."
prompt_2_3 = "Find the Duplicate Number. The implementation should be in a function named funcImp that takes a single list of integers as a parameter."
prompt_2_4 = "Find the Duplicate Number. The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers as a parameter."

prompt_3_1 = "Python algorithm to find the indexes of the k smallest number in an unsorted array? The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers and k smallest number as a parameters."
prompt_3_2 = "Python algorithm to find the indexes of the k smallest number in an unsorted array? The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers and k smallest number as a parameters."
prompt_3_3 = "Python algorithm to find the indexes of the k smallest number in an unsorted array? The implementation should be in a function named funcImp that takes a single list of integers and k smallest number as a parameters."
prompt_3_4 = "Python algorithm to find the indexes of the k smallest number in an unsorted array? The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers and k smallest number as a parameters."

prompt_4_1 = "Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters."
prompt_4_2 = "Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters."
prompt_4_3 = "Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters."
prompt_4_4 = "Count pairs of elements in an array whose sum equals a given sum (but) do it in a single iteration(!) The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers and target_sum as a parameters."

prompt_5_1 = "How do I find the duplicates in a list and create another list with them? The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers as a parameter."
prompt_5_2 = "How do I find the duplicates in a list and create another list with them? The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers as a parameter."
prompt_5_3 = "How do I find the duplicates in a list and create another list with them? The implementation should be in a function named funcImp that takes a single list of integers as a parameter."
prompt_5_4 = "How do I find the duplicates in a list and create another list with them? The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers as a parameter."

prompt_6_1 = "Removing duplicates in lists. The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers as a parameter."
prompt_6_2 = "Removing duplicates in lists. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers as a parameter."
prompt_6_3 = "Removing duplicates in lists. The implementation should be in a function named funcImp that takes a single list of integers as a parameter."
prompt_6_4 = "Removing duplicates in lists. The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers as a parameter."

prompt_7_1 = "Quicksort with Python. The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers as a parameter."
prompt_7_2 = "Quicksort with Python. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers as a parameter."
prompt_7_3 = "Quicksort with Python. The implementation should be in a function named funcImp that takes a single list of integers as a parameter."
prompt_7_4 = "Quicksort with Python. The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers as a parameter."

prompt_8_1 = "How do I reverse a list or loop over it backwards? The implementation should be fast. Avoid using print function. The implementation should be in a function named funcImp that takes a single list of integers as a parameter."
prompt_8_2 = "How do I reverse a list or loop over it backwards? The implementation should be fast as the size of the list grows. Avoid using print function. The implementation should be in a function named funcImp that takes a single list of integers as a parameter."
prompt_8_3 = "How do I reverse a list or loop over it backwards?  Avoid using print function. The implementation should be in a function named funcImp that takes a single list of integers as a parameter."
prompt_8_4 = "How do I reverse a list or loop over it backwards? The implementation should have the most optimal time complexity possible. Avoid using print function. The implementation should be in a function named funcImp that takes a single list of integers as a parameter."

prompt_9_1 = "How to count the frequency of the elements in an unordered list? The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers as a parameter."
prompt_9_2 = "How to count the frequency of the elements in an unordered list? The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers as a parameter."
prompt_9_3 = "How to count the frequency of the elements in an unordered list? The implementation should be in a function named funcImp that takes a single list of integers as a parameter."
prompt_9_4 = "How to count the frequency of the elements in an unordered list? The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers as a parameter."

prompt_10_1 = "Maximum Product Subarray. The implementation should be fast. The implementation should be in a function named funcImp that takes a single list of integers as a parameter."
prompt_10_2 = "Maximum Product Subarray. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single list of integers as a parameter."
prompt_10_3 = "Maximum Product Subarray. The implementation should be in a function named funcImp that takes a single list of integers as a parameter."
prompt_10_4 = "Maximum Product Subarray. The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single list of integers as a parameter."

prompt_11_1 = "How to find middle element in a python linked list in a single traversal? The implementation should be fast. The implementation should be in a function named funcImp that takes a single head as a parameter."
prompt_11_2 = "How to find middle element in a python linked list in a single traversal? The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single head as a parameter."
prompt_11_3 = "How to find middle element in a python linked list in a single traversal? The implementation should be in a function named funcImp that takes a single head as a parameter."
prompt_11_4 = "How to find middle element in a python linked list in a single traversal? The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single head as a parameter."

prompt_12_1 = "How to detect a loop in a linked list? The implementation should be fast. The implementation should be in a function named funcImp that takes a single head as a parameter."
prompt_12_2 = "How to detect a loop in a linked list? The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single head as a parameter."
prompt_12_3 = "How to detect a loop in a linked list? The implementation should be in a function named funcImp that takes a single head as a parameter."
prompt_12_4 = "How to detect a loop in a linked list? The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single head as a parameter."

prompt_13_1 = "Reversing a linked list in python. The implementation should be fast. The implementation should be in a function named funcImp that takes a single head as a parameter."
prompt_13_2 = "Reversing a linked list in python. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single head as a parameter."
prompt_13_3 = "Reversing a linked list in python. The implementation should be in a function named funcImp that takes a single head as a parameter."
prompt_13_4 = "Reversing a linked list in python. The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single head as a parameter."

prompt_14_1 = "Finding the length of a linked list in python. The implementation should be fast. The implementation should be in a function named funcImp that takes a single head as a parameter."
prompt_14_2 = "Finding the length of a linked list in python. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single head as a parameter."
prompt_14_3 = "Finding the length of a linked list in python. The implementation should be in a function named funcImp that takes a single head as a parameter."
prompt_14_4 = "Finding the length of a linked list in python. The implementation should have the most optimal time complexity possible. The implementation should be in a function named funcImp that takes a single head as a parameter."

prompt_15_1 = "Pascals Triangle for Python. The implementation should be fast. The implementation should be in a function named funcImp that takes a single number of raws as a parameter."
prompt_15_2 = "Pascals Triangle for Python. The implementation should be fast as the size of the list grows. The implementation should be in a function named funcImp that takes a single number of raws as a parameter."
prompt_15_3 = "Pascals Triangle for Python.  The implementation should be in a function named funcImp that takes a single number of raws as a parameter."
prompt_15_4 = "Pascals Triangle for Python. The implementation should have the most optimal time complexity possible.  The implementation should be in a function named funcImp that takes a single number of raws as a parameter."
